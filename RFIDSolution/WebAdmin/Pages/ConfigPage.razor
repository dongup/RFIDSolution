<div class="m-2">
    <div class="row">
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <Form OnValidSubmit="() => updateConfig()">
                        <div class="row">
                            <div class="col-md-3">
                                <ReaderStatus></ReaderStatus>
                            </div>
                            <div class="col-md-9">
                                <div class="row">
                                    <div class="col-md-12 d-flex align-items-center">
                                        <div class="spacer"></div>
                                        @foreach(var light in lightStatuses)
                                        {
                                            <label class="me-2">@light.Type.GetDescription():</label>
                                            <button type="button" class="btn @(light.PortState? "btn-success" : "btn-danger") p-1 me-2" @onclick="() => toogleLED(light.PortIndex, !light.PortState)">@(light.PortState? "ON" : "OFF")</button>
                                        }
                                    </div>

                                    <FormInputText @bind-Text="@config.READER_IP" InValidFeedBack="Please enter reader's ip address" Title="IP address" PlaceHolder="Enter reader's ip address" Required="true" Size="12"></FormInputText>
                                    <FormInputNumber @bind-Value="@config.READER_PORT" InValidFeedBack="Please enter reader's port number" Title="Port" PlaceHolder="Enter reader's port" Required="true" Size="12"></FormInputNumber>
                                    <FormInputNumber @bind-Value="@config.TAG_TIME_OUT" InValidFeedBack="Please enter tag's time out" Title="Time out" PlaceHolder="Enter tag's time out" Required="false" Size="12"></FormInputNumber>
                                    <div class="col-md-12 d-flex mt-2">
                                        <button class="btn btn-primary me-4" type="submit"><span class="oi oi-check me-2"></span> SAVE</button>
                                        <button class="btn btn-secondary me-4" type="button" @onclick="async () => await loadPage()"><span class="oi oi-reload me-2"></span>REFRESH</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </Form>
                </div>
            </div>

            <div class="mt-2 card">
                <div class="card-header">
                    <h3 class="m-0">ANTENNA CONFIG</h3>
                </div>
                <div class="card-body">
                    <table class="table table-bordered">
                        <thead>
                            <tr>
                                <th>PORT</th>
                                <th>NAME</th>
                                <th>LOCATION</th>
                                <th>POWER</th>
                                <th class="text-center">STATUS</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in antenas)
                            {
                                @if (!item.IsEditing)
                                {
                                    <tr class="hand">
                                        <td class="wp-100">@item.ANTENNA_ID</td>
                                        <td>@item.ANTENNA_NAME</td>
                                        <td class="wp-100">@item.LOCATION.GetDescription()</td>
                                        <td class="wp-100">@item.ANTENNA_POWER</td>
                                        <td class="wp-75 text-center">
                                            <StatusBadge Success="item.ANTENNA_STATUS == AntennaStatus.Connected" Error="item.ANTENNA_STATUS == AntennaStatus.Disconnected || item.ANTENNA_STATUS == AntennaStatus.Unknown">
                                                @item.ANTENNA_STATUS.GetDescription()
                                            </StatusBadge>
                                        </td>
                                        <td class="wp-75 p-0">
                                            <div class="btn-group" role="group">
                                                <button type="button" class="btn btn-icon" @onclick="() => item.IsEditing = true"><span class="oi oi-pencil text-warning"></span></button>
                                                <button type="button" class="btn btn-icon" @onclick="() => deleteAntenna(item)"><span class="oi oi-delete text-danger"></span></button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                                else
                                {
                                    <tr class="new-row">
                                        <td class="wp-100 p-0"><input type="number" class="form-control" @bind-value="item.ANTENNA_ID" placeholder="Enter antenna index..." /></td>
                                        <td class="p-0"><input type="text" @bind-value="item.ANTENNA_NAME" class="form-control" placeholder="Enter antenna name" /></td>
                                        <td class="wp-100 p-0">
                                            <EditForm Model="item">
                                                <InputSelect @bind-Value="item.LOCATION" TValue="AntennaLocation" class="form-control">
                                                    <option value="@AntennaLocation.CheckPoint">@AntennaLocation.CheckPoint.GetDescription()</option>
                                                    <option value="@AntennaLocation.Table">@AntennaLocation.Table.GetDescription()</option>
                                                </InputSelect>
                                            </EditForm>
                                        </td>
                                        <td class="p-0 wp-100">
                                            <EditForm Model="item">
                                                <InputSelect @bind-Value="item.ANTENNA_POWER" TValue="int" class="form-control">
                                                    @foreach (var power in antenaPowers)
                                                    {
                                                        <option value="@power">@power</option>
                                                    }
                                                </InputSelect>
                                            </EditForm>
                                        </td>
                                        <td class="wp-75 text-center">
                                            <StatusBadge Success="item.ANTENNA_STATUS == AntennaStatus.Connected" Error="item.ANTENNA_STATUS == AntennaStatus.Disconnected || item.ANTENNA_STATUS == AntennaStatus.Unknown">
                                                @item.ANTENNA_STATUS.GetDescription()
                                            </StatusBadge>
                                        </td>
                                        <td class="wp-75 p-0">
                                            <div class="btn-group" role="group">
                                                <button type="button" class="btn btn-icon" @onclick="() => editAntenna(item)"><span class="oi oi-check text-success"></span></button>
                                                <button type="button" class="btn btn-icon" @onclick="async () => { item.IsEditing = false; await loadAntenas(); }"><span class="oi oi-circle-x text-secondary"></span></button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            }
                            @if (addingItem)
                            {
                                <tr class="new-row">
                                    <td class="wp-200"><input type="number" class="form-control" @bind-value="newAntena.ANTENNA_ID" placeholder="Enter antenna's index..." /></td>
                                    <td class="p-0"><input type="text" @bind-value="newAntena.ANTENNA_NAME" class="form-control" placeholder="Enter antenna's name..." /></td>
                                    <td class="wp-200">
                                        <EditForm Model="newAntena">
                                            <InputSelect @bind-Value="newAntena.LOCATION" TValue="AntennaLocation" class="form-control">
                                                <option value="@AntennaLocation.CheckPoint">@AntennaLocation.CheckPoint.GetDescription()</option>
                                                <option value="@AntennaLocation.Table">@AntennaLocation.Table.GetDescription()</option>
                                            </InputSelect>
                                        </EditForm>
                                    </td>
                                    <td>
                                        <EditForm Model="newAntena">
                                            <InputSelect @bind-Value="newAntena.ANTENNA_POWER" TValue="int" class="form-control">
                                                @foreach (var power in antenaPowers)
                                                {
                                                    <option value="@power">@power</option>
                                                }
                                            </InputSelect>
                                        </EditForm>
                                    </td>
                                    <td></td>
                                    <td class="wp-75 p-0">
                                        <div class="btn-group" role="group">
                                            <button type="button" class="btn btn-icon" @onclick="addAntenna"><span class="oi oi-check text-success"></span></button>
                                            <button type="button" class="btn btn-icon" @onclick="() => addingItem = false"><span class="oi oi-circle-x text-danger"></span></button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                        <tfoot>
                            <tr>
                                <td colspan="1000">
                                    <a class="hand" @onclick="() => { addingItem = !addingItem; }"><span class="@addClass"></span>@addText</a>
                                </td>
                            </tr>
                        </tfoot>
                    </table>
                </div>
            </div>
        </div> 
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <div class="d-flex align-items-center w-100">
                        <h5 class="m-0">Reader events</h5>
                        <div class="spacer"></div>
                        <div>
                            <label class="form-label" for="slt-event">Filter event</label>
                            <select id="slt-event" class="form-control-sm" @onchange="async (e) => { eventType = int.Parse(e.Value.ToString()); await loadReaderEvent(); }">
                                <option value="0">Any event</option>
                                <option value="@((int)RdrLog.Connect)">@RdrLog.Connect.GetDescription()</option>
                                <option value="@((int)RdrLog.Disconnect)">@RdrLog.Disconnect.GetDescription()</option>
                                <option value="@((int)RdrLog.Error)">@RdrLog.Error.GetDescription()</option>
                                <option value="@((int)RdrLog.Info)">@RdrLog.Info.GetDescription()</option>
                            </select>
                        </div>
                    </div>
                </div>
                <div>
                    <table class="table table-bordered">
                        <thead>
                            <tr>
                                <th>TIME</th>
                                <th>MESSAGE</th>
                                <th>EVENT</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var e in readerEvents)
                            {
                                <tr>
                                    <td class="wp-150">@e.CREATED_DATE.ToVNString()</td>
                                    <td>@e.LOG_CONTENT</td>
                                    <td class="wp-100">
                                        <StatusBadge Success="e.LOG_TYPE == RdrLog.Connect" Error="e.LOG_TYPE == RdrLog.Disconnect || e.LOG_TYPE == RdrLog.Error"
                                                     Info="e.LOG_TYPE == RdrLog.Info">
                                            @e.LOG_TYPE.GetDescription()
                                        </StatusBadge>
                                    </td>
                                </tr>
                            }
                        </tbody>
                        <tfoot>
                            <tr>
                                <td colspan="1000">
                                    <Pagination TableState="tableEventState" StateChanged="(e) => loadReaderEvent()" TotalPageDisplay="3"></Pagination>
                                </td>
                            </tr>
                        </tfoot>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

@page "/config"
@inject HttpClient _client
@using Microsoft.AspNetCore.SignalR.Client
@inject DialogService _dialog
@code {
    private HubConnection hubConnection;
    private bool HubStatus => hubConnection?.State == HubConnectionState.Connected;
    private bool IsConnected => ReaderStatus.IsConnected;
    private ReaderStatusModel ReaderStatus = new ReaderStatusModel();
    private ConfigurationModel config = new ConfigurationModel();
    private bool connecting = false;
    private List<LightStatusModel> lightStatuses = new List<LightStatusModel>();

    private bool addingItem = false;
    private string addText => !addingItem ? "ADD NEW ANTENNA" : "CANCEL ADD";
    private string addClass => addingItem ? "oi oi-circle-x text-danger" : "oi oi-plus text-success";

    private List<ReaderLogModel> readerEvents = new List<ReaderLogModel>();
    private TableState tableEventState = new TableState();
    private int eventType = 0;

    private List<AntenaModel> antenas = new List<AntenaModel>();
    private List<int> antenaPowers = new List<int>();
    private AntenaModel newAntena = new AntenaModel();
    private string antennaUrl = "Antennas";

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        MainLayout.Instance.PageTitle = "Reader config";
        await loadConfig();

        if (hubConnection == null)
        {
            hubConnection = new HubConnectionBuilder()
                  .WithUrl($"{Program.RootApiUrl}ReaderStatusHub")
                  .Build();
            hubConnection.On<ReaderStatusModel>("StatusChanged", ReaderStatusChanged);
            hubConnection.On<ReaderStatusModel>("AntennaStatusChanged", AntennaStatusChanged);
        }

        await hubConnection.StartAsync();
        await loadPage();
    }

    private async Task loadPage()
    {
        await loadAntennaPowers();
        await loadAntenas();
        await checkStatus();
        await checkAntennaStatus();
        await loadReaderEvent();
        await getLightStatus();
    }

    private async Task getLightStatus()
    {
        var rspns = await _client.GetFromJsonAsync<ResponseModel<List<LightStatusModel>>>($"ReaderStatus/lightStatus");
        if (rspns.IsSuccess)
        {
            lightStatuses = rspns.Result;
        }
        else
        {
            await _dialog.ErrorAlert(rspns.Message);
        }
    }

    private async Task toogleLED(int portId, bool status)
    {
        var port = lightStatuses.FirstOrDefault(x => x.PortIndex == portId);
        if (port.Type == GPOPortType.Power) return;

        string action = status ? "turnOnPort" : "turnOffPort";
        string actionShort = status ? "on" : "off";

        var req = await _client.PostAsJsonAsync($"ReaderStatus/{action}?port={portId}", new object());
        var rspns = await req.Content.ReadFromJsonAsync<ResponseModel<object>>();
        if (rspns.IsSuccess)
        {
            await _dialog.SuccessAlert($"{port.Type.GetDescription()} turned {actionShort}!");
            await getLightStatus();
        }
        else
        {
            await _dialog.ErrorAlert(rspns.Message);
        }
    }

    private async Task loadReaderEvent()
    {
        var rspns = await _client.GetFromJsonAsync<ResponseModel<PaginationResponse<ReaderLogModel>>>($"ReaderStatus/events?eventType={eventType}&pageItem={tableEventState.PageItem}&pageIndex={tableEventState.PageIndex}");
        if (rspns.IsSuccess)
        {
            readerEvents = rspns.Result.Data;
            tableEventState.TotalRow = rspns.Result.TotalRow;
        }
        else
        {
            await _dialog.SuccessAlert(rspns.Message);
        }
    }

    #region Antenas
    public async Task loadAntennaPowers()
    {
        var rspns = await _client.GetFromJsonAsync<ResponseModel<List<int>>>($"{antennaUrl}/powers");
        if (rspns.IsSuccess)
        {
            antenaPowers = rspns.Result;
        }
        else
        {
            await _dialog.SuccessAlert(rspns.Message);
        }
    }

    public async Task loadAntenas()
    {
        var rspns = await _client.GetFromJsonAsync<ResponseModel<List<AntenaModel>>>($"{antennaUrl}");
        if (rspns.IsSuccess)
        {
            antenas = rspns.Result;
        }
        else
        {
            await _dialog.SuccessAlert(rspns.Message);
        }

        await checkAntennaStatus();
    }

    private async Task addAntenna()
    {
        if (string.IsNullOrEmpty(newAntena.ANTENNA_NAME))
        {
            await _dialog.ErrorAlert("Please input new antenna's name!");
            return;
        }

        if (!await _dialog.Confirm("Are you sure you want to add new antenna?")) return;

        var req = await _client.PostAsJsonAsync($"{antennaUrl}", newAntena);
        var rspns = await req.Content.ReadFromJsonAsync<ResponseModel<object>>();
        if (rspns.IsSuccess)
        {
            await _dialog.SuccessAlert("Antenna added!");
            newAntena = new AntenaModel();
            await loadAntenas();
        }
        else
        {
            await _dialog.ErrorAlert(rspns.Message);
        }
    }

    private async Task editAntenna(AntenaModel item)
    {
        if (string.IsNullOrEmpty(item.ANTENNA_NAME))
        {
            await _dialog.ErrorAlert("Please input new antenna's name!");
            return;
        }

        if (!await _dialog.Confirm("Are you sure you want to save changes?")) return;

        var httpReq = await _client.PutAsJsonAsync($"{antennaUrl}/{item.ID}", item);
        var rspns = await httpReq.Content.ReadFromJsonAsync<ResponseModel<bool>>();
        if (rspns.IsSuccess)
        {
            await _dialog.SuccessAlert("Antenna's info updated! Please reconnect reader to apply your changes!");
            await loadAntenas();
        }
        else
        {
            await _dialog.ErrorAlert(rspns.Message);
        }
    }

    private async Task deleteAntenna(AntenaModel item)
    {
        if (!await _dialog.Confirm("Are you sure you want to delete this antenna?")) return;

        var httpReq = await _client.DeleteAsync($"{antennaUrl}/{item.ID}");
        var rspns = await httpReq.Content.ReadFromJsonAsync<ResponseModel<bool>>();

        if (rspns.IsSuccess)
        {
            await _dialog.SuccessAlert("Antenna deleted!");
            await loadAntenas();
        }
        else
        {
            await _dialog.ErrorAlert(rspns.Message);
        }
    }
    #endregion

    #region Reader region
    private async Task checkStatus()
    {
        await hubConnection.InvokeAsync("CheckStatus");
    }

    private async Task checkAntennaStatus()
    {
        await hubConnection.InvokeAsync("CheckAntennaStatus");
    }

    private async Task ReaderStatusChanged(ReaderStatusModel readerStatus)
    {
        connecting = false;
        await loadReaderEvent();

        if (readerStatus.IsSuccess)
        {
            await _dialog.SuccessAlert(readerStatus.Message);
        }
        else
        {
            await _dialog.ErrorAlert(readerStatus.Message);
        }

        ReaderStatus.AvaiableAntennas = readerStatus.AvaiableAntennas;
        ReaderStatus.IsSuccess = readerStatus.IsSuccess;
        ReaderStatus.Message = readerStatus.Message;
        ReaderStatus.IsConnected = readerStatus.IsConnected;
        ReaderStatus.IsInventoring = readerStatus.IsInventoring;


        foreach(var anten in antenas)
        {
            Console.WriteLine(readerStatus.AvaiableAntennas.Count);
            var findAnten = readerStatus.AvaiableAntennas.FirstOrDefault(x => x.ANTENNA_ID == anten.ANTENNA_ID);
            if(findAnten != null)
            {
                anten.ANTENNA_STATUS = findAnten.ANTENNA_STATUS;
                Console.WriteLine($"Antenna id {anten.ANTENNA_ID} status {anten.ANTENNA_STATUS.GetDescription()}");
            }
            else
            {
                anten.ANTENNA_STATUS = AntennaStatus.Unknown;
            }
        }
        StateHasChanged();
    }

    private void AntennaStatusChanged(ReaderStatusModel readerStatus)
    {
        ReaderStatus.AvaiableAntennas = readerStatus.AvaiableAntennas;

        foreach (var anten in antenas)
        {
            Console.WriteLine(readerStatus.AvaiableAntennas.Count);
            var findAnten = readerStatus.AvaiableAntennas.FirstOrDefault(x => x.ANTENNA_ID == anten.ANTENNA_ID);
            if (findAnten != null)
            {
                anten.ANTENNA_STATUS = findAnten.ANTENNA_STATUS;
                Console.WriteLine($"Antenna id {anten.ANTENNA_ID} status {anten.ANTENNA_STATUS.GetDescription()}");
            }
            else
            {
                anten.ANTENNA_STATUS = AntennaStatus.Unknown;
            }
        }
        StateHasChanged();
    }

    private async Task toogleReader()
    {
        if (ReaderStatus.IsConnected)
        {
            if (!await _dialog.Confirm("Are you sure want to disconnect reader???")) return;

            await Disconnect();
        }
        else
        {
            await Reconnect();
        }
    }

    private async Task Reconnect()
    {
        connecting = true;
        if (!HubStatus)
        {
            await hubConnection.StartAsync();
        }

        await hubConnection.InvokeAsync("ConnectReader");
    }

    private async Task Disconnect()
    {
        if (!HubStatus)
        {
            await hubConnection.StartAsync();
        }

        await hubConnection.InvokeAsync("DisconnectReader");
    }

    private async Task loadConfig()
    {
        var rspns = await _client.GetFromJsonAsync<ResponseModel<ConfigurationModel>>("config");
        if (rspns.IsSuccess)
        {
            config = rspns.Result;
        }
        else
        {
            await _dialog.ErrorAlert(rspns.Message);
        }
    }

    private async Task updateConfig()
    {
        var req = await _client.PutAsJsonAsync<ConfigurationModel>("config", config);
        var rspns = await req.Content.ReadFromJsonAsync<ResponseModel<bool>>();
        if (rspns.IsSuccess)
        {
            await _dialog.SuccessAlert("Reader configs updated, please disconnect and reconnect to apply your changes!");
        }
        else
        {
            await _dialog.ErrorAlert(rspns.Message);
        }
    }
    #endregion
}
