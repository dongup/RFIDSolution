<div class="card m-2 w-100">
    <div class="card-body">
        <div class="row">
            <RFReaderConnect Size="2" OnRead="OnTagRead" AntennaId="@AntenaId" @ref="rfReaderConnect"></RFReaderConnect>
            <div class="col-md-10">
                <Form OnValidSubmit="async () => { await addProduct(); }">
                    <FormInputSearch Text="@newProduct.SKU" Size="4" Title="SKU" TextChanged="async (e) => { newProduct.SKU = e; await searchSKU(); }"></FormInputSearch>
                    <FormInputText @bind-Text="newProduct.Location" Title="Location" Size="2" Required="true" InValidFeedBack="Please provide a valid location."></FormInputText>
                    <FormInputText @bind-Text="newProduct.Season" Title="Season" Size="2" Required="true" InValidFeedBack="Please provide a valid season."></FormInputText>
                    <FormInputText @bind-Text="newProduct.Stage" Title="Stage" Size="2" Required="true" InValidFeedBack="Please provide a valid stage."></FormInputText>

                    <div class="col-md-2">
                        <label for="slt-lr" class="form-label m-0">Left/Right <Required></Required></label>
                        <InputSelect class="form-select form-select-sm" id="slt-lr" required @bind-Value="newProduct.LR">
                            <option value="@(ProductSide.Left)">Left</option>
                            <option value="@(ProductSide.Right)">Right</option>
                        </InputSelect>
                        <div class="invalid-feedback">
                            Please select a side.
                        </div>
                    </div>

                    <div class="col-md-4">
                        <label for="slt-model" class="form-label m-0">Model <Required></Required></label>
                        <InputSelect class="form-select form-select-sm" id="slt-model" required @bind-Value="newProduct.ModelId">
                            <option selected disabled value="">Choose model</option>
                            @foreach (var item in models)
                            {
                                <option value="@item.Id">@item.Name</option>
                            }
                        </InputSelect>
                        <div class="invalid-feedback">
                            Please select a valid model.
                        </div>
                    </div>

                    <FormInputText @bind-Text="@newProduct.DevStyleName" Title="Dev style number" Size="4" Required="true" InValidFeedBack="Please provide a valid dev style number."></FormInputText>
                    <FormInputText @bind-Text="@newProduct.ColorWay" Title="Color way" Size="2" Required="true" InValidFeedBack="Please provide a valid color way."></FormInputText>
                    <FormInputText @bind-Text="@newProduct.Size" Title="Size" Size="2" Required="true" InValidFeedBack="Please provide a valid size."></FormInputText>
                    <FormInputText @bind-Text="@newProduct.Category" Title="Category" Size="4" Required="true" InValidFeedBack="Please provide a valid category."></FormInputText>
                    <FormInputText @bind-Text="@newProduct.RefDocNo" Title="Document no" Size="2" Required="true" InValidFeedBack="Please provide a valid category."></FormInputText>
                    <FormInputText @bind-Text="@newProduct.RefDocDate" Title="Document date" Size="2" Required="true" InValidFeedBack="Please provide a valid category."></FormInputText>
                    <FormInputText @bind-Text="@newProduct.POC" Title="POC" Size="4" Required="true" InValidFeedBack="Please provide a valid POC."></FormInputText>

                    <div class="col-md-12 mb-1">
                        <label for="ipt-cat" class="form-label m-0">Remarks</label>
                        <InputTextArea @bind-Value="newProduct.Remarks" type="text" class="form-control" id="ipt-cat" rows="2"></InputTextArea>
                    </div>

                    <div class="col-12 d-flex mt-2">
                        <button class="btn btn-success me-2" type="submit"><span class="oi oi-cloud-upload"></span>SAVE</button>
                        <button class="btn btn-secondary me-2" type="reset" @onclick="() => newProduct = new ProductModel()"><span class="oi oi-delete"></span>CLEAR</button>
                    </div>
                </Form>
            </div>
        </div>
    </div>
</div>

<div class="card m-2 bg-white">
    <div class="card-header d-flex align-items-center">
        <h5 class="text-body m-0">SCAN RESULTS - Total: <span class="text-success">@Tags.Count</span></h5>
        <div class="spacer"></div>
        <button class="float-end btn btn-secondary" @onclick="() => { Tags.Clear(); }"><span class="oi oi-delete"></span> CLEAR SCAN RESULT</button>
    </div>
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>#</th>
                <th>EPC</th>
                <th>ANTENNA ID</th>
                <th>STATUS</th>
                <th>READ COUNT</th>
                <th>FIRST SEEN</th>
                <th>LAST SEEN</th>
                <th>SIGNAL STRENGHT</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @if (Tags.Count > 0)
            {
                int count = 1;
                @foreach (var item in Tags)
                {
                    <SelectableRow @bind-Selected="item.IsSelected" OnClick="() => rowClicked(item)">
                        <MyTd>@(count)</MyTd>
                        <MyTd>@item.EPCID</MyTd>
                        <MyTd>@item.AntennaID</MyTd>
                        <MyTd>
                            @if (item.Status == 1)
                            {
                                <span class="badge bg-success">Active</span>
                            }
                            else
                            {
                                <span class="badge bg-danger">Away</span>
                            }
                        </MyTd>
                        <MyTd>@item.Count</MyTd>
                        <MyTd>@item.FirstSeen.ToTimeString()</MyTd>
                        <MyTd>@item.LastSeen.ToTimeString()</MyTd>
                        <MyTd>
                            <SignalStrenghtBar Strenght="item.SignalStrenght"></SignalStrenghtBar>
                        </MyTd>
                        <MyTd><button class="btn btn-icon p-0" title="Delete" @onclick="() => { Tags.Remove(item); }"><span class="oi oi-delete"></span></button></MyTd>
                    </SelectableRow>
                    count++;
                }
            }
            else
            {
                <tr>
                    <td colspan="10000" class="text-center" style="padding: 60px 80px"><h3>Press "START/STOP" to start scan</h3></td>
                </tr>
            }
        </tbody>
        <tfoot></tfoot>
    </table>
</div>

@using static RFIDSolution.Shared.Protos.ShoeModelProto
@using Grpc.Core;

@inject ShoeModelProtoClient modelClient
@inject DialogService _dialog
@inject HttpClient _httpClient
@implements IDisposable
@page "/mappingproduct"
@code{
    private string test = "";
    private bool reading = false;

    private int AntenaId = 1;
    private List<AntenaModel> antenas = new List<AntenaModel>();

    private List<RFTagResponse> Tags = new List<RFTagResponse>();
    private List<ShoeModel> models = new List<ShoeModel>();
    private ShoeModel sledMode => models.FirstOrDefault(x => x.Id == newProduct.ModelId);

    private AsyncServerStreamingCall<RFTagResponse> _rfStream;
    private ProductModel newProduct = new ProductModel();

    private RFReaderConnect rfReaderConnect = new RFReaderConnect();

    private void rowClicked(RFTagResponse tagResponse)
    {
        foreach(var tag in Tags)
        {
            if(tagResponse.EPCID == tag.EPCID)
            {
                tag.IsSelected = true;
            }
            else
            {
                tag.IsSelected = false;
            }
        }
    }

    private async Task searchSKU()
    {
        if (string.IsNullOrEmpty(newProduct.SKU)) return;
        var rspns = await _httpClient.GetFromJsonAsync<ResponseModel<ProductModel>>("products/bySKU?SKU=" + newProduct.SKU);
        if (rspns.IsSuccess)
        {
            newProduct = new ProductModel()
            {
                SKU = newProduct.SKU
            };
            newProduct = rspns.Result;
        }
        else
        {
            await _dialog.ErrorAlert(rspns.Message);
        }
    }

    private async Task addProduct()
    {
        if (Tags.Count == 0)
        {
            await _dialog.ErrorAlert("Please scan at least one shoe!");
            return;
        }

        //if (Tags.Count > 1)
        //{
        //    await _dialog.ErrorAlert("Please scan only one shoe at a time!");
        //    return;
        //}

        if (!await _dialog.Confirm($"Are you sure want to mapping selected tag?")) return;

        newProduct.EPC = Tags.FirstOrDefault(x => x.IsSelected).EPCID;
        var req = await _httpClient.PostAsJsonAsync<ProductModel>("products", newProduct);
        var rspns = await req.Content.ReadFromJsonAsync<ResponseModel<bool>>();
        if (rspns.IsSuccess)
        {
            await _dialog.SuccessAlert("Tag mapping succeed!");

            newProduct = new ProductModel();
            Tags.Clear();
            StateHasChanged();
        }
        else
        {
            await _dialog.ErrorAlert(rspns.Message);
        }
    }

    private void OnTagRead(RFTagResponse tag)
    {
        _ = Task.Run(() => {
            tag.Status = 1;
            var item = Tags.FirstOrDefault(x => x.EPCID == tag.EPCID);
            if (item == null)
            {
                tag.FirstSeen = DateTime.Now.Ticks;
                Tags.Add(tag);
            }
            else
            {
                item.Status = 1;
                item.LastSeen = tag.LastSeen;
                item.Count++;
                item.RSSI = tag.RSSI;
                item.SignalStrenght = tag.SignalStrenght;
                item.AntennaID = tag.AntennaID;
            }

            foreach (var readTag in Tags)
            {
                DateTime lastSeen = readTag.LastSeen.ToDateTime();
                //Nếu tag đã không được đọc trong 3 giây thì coi như đã đi ra khỏi vùng phủ sóng
                if ((DateTime.Now - lastSeen).TotalSeconds >= 3)
                {
                    readTag.Status = 2;
                    readTag.RSSI = 0;
                    Tags.Remove(readTag);
                }
                else
                {
                    readTag.Status = 1;
                }
            }
        });
        //StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        MainLayout.Instance.PageTitle = "Product mapping";
        var rspns = await modelClient.GetAsync(new ShoeModelFilter());
        models = rspns.Data.ToList();
        newProduct.ModelId = models.FirstOrDefault().Id;
        await loadAntenas();
        StateHasChanged();
    }

    public async Task loadAntenas()
    {
        var rspns = await _httpClient.GetFromJsonAsync<ResponseModel<List<AntenaModel>>>($"Antennas");
        if (rspns.IsSuccess)
        {
            antenas = rspns.Result;
            AntenaId = antenas.FirstOrDefault(x => x.LOCATION == AntennaLocation.Table)?.ANTENNA_ID ?? 0;
            Console.WriteLine(AntenaId);
        }
        else
        {
            await _dialog.SuccessAlert(rspns.Message);
        }
    }

    async void IDisposable.Dispose()
    {
        await rfReaderConnect.stopReader();
    }
}