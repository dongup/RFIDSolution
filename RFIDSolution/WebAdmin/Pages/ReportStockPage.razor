<TableHeader>
    <HeaderContent>
        <button class="btn btn-light me-2" @onclick="async () => { await downLoadReport(); }"><span class="oi oi-cloud-download text-success"></span>Export to excel file</button>

        <button class="btn btn-light" @onclick="async () => { await loadData(); }"><span class="oi oi-reload text-primary"></span>Refresh data</button>
    </HeaderContent>
    <FilterContent>
        <div class="row">
            <div class="col-md-3">
                <DatePicker Label="Date" Date="toDate" DateChanged="async (e) => { toDate = e; await loadData(); }"></DatePicker>
            </div>
        </div>
    </FilterContent>
</TableHeader>

@if (loading)
{
    <Loading></Loading>
}
else
{
    <div class="m-2 bg-white">
        <div class="p-4">
            <h3 class="m-0 text-center text-bold" style="font-family: 'Times New Roman'">
                BÁO CÁO TỒN KHO/STOCK REPORT
            </h3>

            <div class="row">
                <div class="col-md-8">
                    <div class="d-flex flex-column">
                        <div class="d-flex">
                            <label class="col-md-2">Kho/Stock </label>
                            <p class="m-0">Hàng mẫu</p>
                        </div>
                        <div class="d-flex">
                            <label class="col-md-2">Thời gian/Date </label>
                            <p class="m-0">@toDate.ToShortVNString()</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="d-flex flex-column">
                        <label>Ngày giờ lập báo báo/Time</label>
                        <p>@DateTime.Now.ToVNString()</p>
                    </div>
                </div>
            </div>
        </div>

        <div>
            <table class="table table-bordered table-hover">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>SKU</th>
                        <th>MODEL</th>
                        <th>CATEGORY</th>
                        <th>COLOR WAY</th>
                        <th>SIZE</th>
                        <th>DEV STYLE</th>
                        <th>SEASON</th>
                        <th>STAGE</th>
                        <th>LOCATION</th>
                        <th>POC</th>
                        <th>LR</th>
                        <th>STATUS</th>
                        <th>REMARKS</th>
                    </tr>
                </thead>
                <tbody>
                    @if (products.Count > 0)
                    {
                        int count = 1;
                        @foreach (var item in products)
                        {
                            <tr>
                                <MyTd>@item.ID</MyTd>
                                <MyTd>@item.SKU</MyTd>
                                <MyTd>@item.ModelName</MyTd>
                                <MyTd>@item.Category</MyTd>
                                <MyTd>@item.ColorWay</MyTd>
                                <MyTd>@item.Size</MyTd>
                                <MyTd>@item.DevStyleName</MyTd>
                                <MyTd>@item.Season</MyTd>
                                <MyTd>@item.Stage</MyTd>
                                <MyTd>@item.Location</MyTd>
                                <MyTd>@item.POC</MyTd>
                                <MyTd>@item.LRStr</MyTd>
                                <MyTd>@item.ProductStatusStr</MyTd>
                                <MyTd>@item.Remarks</MyTd>
                            </tr>
                            count++;
                        }
                    }
                    else
                    {
                        <NoData></NoData>
                    }
                </tbody>
                <tfoot>
                    <tr>
                        <td colspan="1000">
                            <Pagination TableState="tableState" TotalPageDisplay="5" StateChanged="async () => await loadData()"></Pagination>
                        </td>
                    </tr>
                </tfoot>
            </table>
        </div>
    </div>
}

@attribute [Authorize]
@inject HttpClient _client
@inject DialogService _dialog
@inject JsService js
@page "/report/stock"
@code {
    [CascadingParameter] public IModalService Modal { get; set; }

    private bool loading = true;
    private bool addingItem = false;
    private string keyword = "";
    private int shoeStatus = 0;
    private int activeTab = 0;

    private TableState tableState = new TableState(20);

    private ProductModel reply = new ProductModel();
    private List<ProductModel> products = new List<ProductModel>();
    private DateTime toDate = DateTime.Now;

    protected override async Task OnInitializedAsync()
    {
        MainLayout.Instance.PageTitle = "Stock report";
        await loadData();
    }

    private async Task downLoadReport()
    {
        string url = $"stockreport?fromDate=&toDate={toDate.ToVNString()}";
        await js.DownLoadFile(url);
    }

    private async Task loadData()
    {
        loading = true;
        //reply = await productService.GetAsync(filter);
        var rspns = await _client.GetFromJsonAsync<ResponseModel<PaginationResponse<ProductModel>>>($"reports/stockreportdata?fromDate=&toDate={toDate.ToShortVNString()}&pageItem={tableState.PageItem}&pageIndex={tableState.PageIndex}");
        if (rspns.IsSuccess)
        {
            products = rspns.Result.Data;
            tableState.TotalRow = rspns.Result.TotalRow;
        }
        else
        {
            await _dialog.ErrorAlert(rspns.Message);
        }
        loading = false;
    }
}
