<TableHeader>
    <HeaderContent>
        <button class="btn btn-light" @onclick="async () => { await loadData(); }"><span class="oi oi-reload mr-2 text-primary"></span>Refresh data</button>
    </HeaderContent>
    <FilterContent>
        <div class="row">
            <div class="col-md-4">
                <InputSearch TextChanged='async (text) => { keyword = text??""; await loadData(); }' PlaceHolder="Model's name"></InputSearch>
            </div>
        </div>
    </FilterContent>
</TableHeader>

@if (loading)
{
    <Loading></Loading>
}
else
{

    <div class="m-2 bg-white">
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>Model Id</th>
                    <th>Model name</th>
                    <th>Product count</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var model in shoeModels)
                {
                    @if (!model.IsEditting)
                    {
                        <tr class="hand">
                            <td class="wp-200">@model.MODEL_ID</td>
                            <td>@model.MODEL_NAME</td>
                            <td class="wp-200">@model.PRODUCT_COUNT</td>
                            <td class="wp-75 p-0">
                                <div class="btn-group" role="group">
                                    <button type="button" class="btn btn-icon" @onclick="() => model.IsEditting = true"><span class="oi oi-pencil text-warning"></span></button>
                                    <button type="button" class="btn btn-icon" @onclick="() => deleteModel(model)"><span class="oi oi-delete text-danger"></span></button>
                                </div>
                            </td>
                        </tr>
                    }
                    else
                    {
                        <tr class="new-row">
                            <td class="wp-200">@model.MODEL_ID</td>
                            <td class="p-0"><input type="text" @bind-value="model.MODEL_NAME" class="form-control" /></td>
                            <td class="wp-200">0</td>
                            <td class="wp-75 p-0">
                                <div class="btn-group" role="group">
                                    <button type="button" class="btn btn-icon" @onclick="() => editModel(model)"><span class="oi oi-check text-success"></span></button>
                                    <button type="button" class="btn btn-icon" @onclick="async () => { model.IsEditting = false; await loadData(); }"><span class="oi oi-circle-x text-secondary"></span></button>
                                </div>
                            </td>
                        </tr>
                    }
                }
                @if (addingItem)
                {
                    <tr class="new-row">
                        <td class="p-0 ps-3 wp-200"></td>
                        <td class="p-0"><input type="text" @bind-value="newModel.MODEL_NAME" class="form-control" /></td>
                        <td class="p-0 ps-3 wp-200">0</td>
                        <td class="wp-75 p-0">
                            <div class="btn-group" role="group">
                                <button type="button" class="btn btn-icon" @onclick="addModel"><span class="oi oi-check text-success"></span></button>
                                <button type="button" class="btn btn-icon" @onclick="() => addingItem = false"><span class="oi oi-circle-x text-danger"></span></button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
            <tfoot>
                <tr>
                    <td colspan="1000">
                        <a class="hand" @onclick="() => { addingItem = !addingItem; }"><span class="@addClass"></span>@addText</a>
                    </td>
                </tr>
            </tfoot>
        </table>
    </div>
}

@attribute [Authorize]
@page "/properties/models"
@using RFIDSolution.Shared.Models.Products;
@inject DialogService _dialog
@inject HttpClient _httpClient
@code {
    [CascadingParameter] public IModalService Modal { get; set; }

    private string baseUrl = "model";
    private string keyword = "";
    private bool loading = true;
    private bool addingItem = false;
    private string addText => !addingItem ? "ADD SHOE MODEL" : "CANCEL ADD";
    private string addClass => addingItem ? "oi oi-circle-x text-danger" : "oi oi-plus text-success";

    private List<ModelResponse> shoeModels = new List<ModelResponse>();
    private ModelResponse newModel = new ModelResponse();

    protected override async Task OnInitializedAsync()
    {
        MainLayout.Instance.PageTitle = "Shoe models";
        await loadData();
    }

    private async Task addModel()
    {
        if (string.IsNullOrEmpty(newModel.MODEL_NAME))
        {
            await _dialog.ErrorAlert("Please input new model's name!");
            return;
        }

        if (!await _dialog.Confirm("Are you sure you want to add shoe model?")) return;

        var req = await _httpClient.PostAsJsonAsync<ModelResponse>($"{baseUrl}", newModel);
        var rspns = await req.Content.ReadFromJsonAsync<ResponseModel<object>>();
        if (rspns.IsSuccess)
        {
            await _dialog.SuccessAlert("Model added!");
            newModel = new ModelResponse();
            await loadData();
        }
        else
        {
            await _dialog.ErrorAlert(rspns.Message);
        }
    }

    private async Task editModel(ModelResponse item)
    {
        if (string.IsNullOrEmpty(item.MODEL_NAME))
        {
            await _dialog.ErrorAlert("Please input new model's name!");
            return;
        }

        if (!await _dialog.Confirm("Are you sure you want to save changes?")) return;

        var httpReq = await _httpClient.PutAsJsonAsync($"{baseUrl}/{item.MODEL_ID}", item);
        var rspns = await httpReq.Content.ReadFromJsonAsync<ResponseModel<object>>();

        if (rspns.IsSuccess)
        {
            await _dialog.SuccessAlert("Model's name updated!");
            await loadData();
        }
        else
        {
            await _dialog.ErrorAlert(rspns.Message);
        }
    }

    private async Task deleteModel(ModelResponse item)
    {
        if (!await _dialog.Confirm("Are you sure you want to delete this shoe model?")) return;

        var httpReq = await _httpClient.DeleteAsync($"{baseUrl}/{item.MODEL_ID}");
        var rspns = await httpReq.Content.ReadFromJsonAsync<ResponseModel<object>>();
        if (rspns.IsSuccess)
        {
            await _dialog.SuccessAlert("Model deleted!");
            await loadData();
        }
        else
        {
            await _dialog.ErrorAlert(rspns.Message);
        }
    }

    private async Task loadData()
    {
        loading = true;
        var rspns = await _httpClient.GetFromJsonAsync<ResponseModel<List<ModelResponse>>>($"{baseUrl}?keyword={keyword}");
        if (rspns.IsSuccess)
        {
            shoeModels = rspns.Result;
        }
        else
        {
            await _dialog.ErrorAlert(rspns.Message);
        }
        loading = false;
    }
}
