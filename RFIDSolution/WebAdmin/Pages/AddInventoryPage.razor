<TableHeader>
    <HeaderContent>
        <button class="btn btn-light me-2" @onclick="() => nav.NavigateBack()"><span class="oi oi-arrow-left me-1"></span>Back</button>
        <button class="btn btn-light me-2" @onclick="() => addPlan()"><span class="oi oi-plus me-1 text-success"></span> CREATE</button>
    </HeaderContent>
</TableHeader>

<div class="m-2">
    <div class="card">
        <div class="card-body">
            <div class="row">
                <Form>
                    <FormInputText @bind-Text="newInventory.INVENTORY_NAME" Title="Name" Size="12" InValidFeedBack="Please enter plan's name" PlaceHolder="Enter plan's name..." Required="true"></FormInputText>
                    <FormInputText @bind-Text="newInventory.REF_DOC_NO" Title="Document no" Size="12" InValidFeedBack="Please enter document no" PlaceHolder="Enter plan's document no..." Required="false"></FormInputText>
                    <FormInputTextarea @bind-Text="newInventory.NOTE" Size="12" Title="Remarks" PlaceHolder="Enter your remarks..."></FormInputTextarea>
                </Form>
            </div>
        </div>
    </div>
</div>

@if (loading)
{
    <Loading></Loading>
}
else
{
    <div class="m-2">
        <div class="row">
            <div class="col-md-6">
                <div class="card">
                    <div>
                        <div class="d-flex align-items-center ps-2">
                            <h6 class="text-success m-0 text-bold">SHOES IN PLAN (@totalShoe)</h6>
                            <div class="spacer"></div>

                            <div style="width: 500px">
                                <InputSearch Text="@keyword" TextChanged="async (e) => { keyword = e; await loadData(); }" PlaceHolder="Search SKU, Model name, EPC,..."></InputSearch>
                            </div>
                        </div>
                    </div>

                    <div class="card-body p-0">
                        <table class="table table-bordered table-hover">
                            <thead>
                                <tr>
                                    <th>ID</th>
                                    <th>SKU</th>
                                    <th>MODEL</th>
                                    <th>CATEGORY</th>
                                    <th>STATUS</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (products.Count > 0)
                                {
                                    int count = 1;
                                    @foreach (var item in products)
                                    {
                                        <tr>
                                            <td>@item.ID</td>
                                            <MyTd>@item.SKU</MyTd>
                                            <MyTd>@item.ModelName</MyTd>
                                            <MyTd>@item.Category</MyTd>
                                            <MyTd>
                                                <ProductStatusBadge ProductStatus="@item.ProductStatus"></ProductStatusBadge>
                                            </MyTd>
                                            <MyTd>
                                                <span title="Delete from inventory list" class="oi oi-delete text-danger hand" @onclick="() => deleteProduct(item)"/>
                                            </MyTd>
                                        </tr>
                                        count++;
                                    }
                                }
                                else
                                {
                                    <NoData></NoData>
                                }
                            </tbody>
                            <tfoot>
                                <tr>
                                    <td colspan="1000">
                                        <Pagination TableState="tableState" TotalPageDisplay="5" StateChanged="async () => await loadData()"></Pagination>
                                    </td>
                                </tr>
                            </tfoot>
                        </table>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h6 class="text-danger m-0">SHOES NOT IN PLAN (@excludedProduct.Count)</h6>
                    </div>

                    <div class="card-body">
                        <table class="table table-bordered table-hover">
                            <thead>
                                <tr>
                                    <th>ID</th>
                                    <th>SKU</th>
                                    <th>MODEL</th>
                                    <th>CATEGORY</th>
                                    <th>STATUS</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (products.Count > 0)
                                {
                                    int count = 1;
                                    @foreach (var item in excludedProduct)
                                    {
                                        <tr>
                                            <td>@item.ID</td>
                                            <td>@item.SKU</td>
                                            <td>@item.ModelName</td>
                                            <td>@item.Category</td>
                                            <td>
                                                <ProductStatusBadge ProductStatus="@item.ProductStatus"></ProductStatusBadge>
                                            </td>
                                             <MyTd>
                                                <span title="Return shoe to inventory list" class="oi oi-delete text-danger hand" @onclick="() => returnProduct(item)"/>
                                            </MyTd>
                                        </tr>
                                        count++;
                                    }
                                }
                                else
                                {
                                    <NoData></NoData>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            
        </div>
    </div>
}

@using RFIDSolution.Shared.Models.Inventory
@attribute [Authorize]
@inject HttpClient _client
@inject DialogService _dialog
@inject NavigationService nav 
@page "/addplan"
@code {
    [CascadingParameter] public IModalService Modal { get; set; }

    private bool loading = true;
    private bool addingItem = false;
    private string keyword = "";
    private int shoeStatus = 0;
    private int activeTab = 0;

    private TableState tableState = new TableState(10);
    private int totalShoe = 0;

    private ProductModel reply = new ProductModel();
    private List<ProductModel> products = new List<ProductModel>();
    private List<ProductModel> excludedProduct = new List<ProductModel>();
    private InventoryModel newInventory = new InventoryModel();

    protected override async Task OnInitializedAsync()
    {
        MainLayout.Instance.PageTitle = "Create new inventory plan";
        await loadData();
    }

    private void returnProduct(ProductModel item)
    {
        products.Add(item);
        excludedProduct.Remove(item);
    }

    private void deleteProduct(ProductModel item)
    {
        excludedProduct.Add(item);
        products.Remove(item);
    }

    private async Task addPlan()
    {
        if (string.IsNullOrEmpty(newInventory.INVENTORY_NAME))
        {
            await _dialog.ErrorAlert("Please enter plan's name");
            return;
        }

        InventoryRequest requestModel = new InventoryRequest();
        requestModel.INVENTORY_NAME = newInventory.INVENTORY_NAME;
        requestModel.REF_DOC_NO = newInventory.REF_DOC_NO;
        requestModel.REMARKS = newInventory.NOTE;
        requestModel.EXCLUDED_PRODUCTS = excludedProduct.Select(x => x.ID).ToList();
        var httpReq = await _client.PostAsJsonAsync<InventoryRequest>("inventory", requestModel);

        var rspns = await httpReq.Content.ReadFromJsonAsync<ResponseModel<object>>();
        if (rspns.IsSuccess)
        {
            await _dialog.SuccessAlert("Inventory plan created!");
            nav.NavigateBack();
        }
        else
        {
            await _dialog.ErrorAlert(rspns.Message);
        }
    }

    private async Task loadData()
    {
        loading = true;
        //reply = await productService.GetAsync(filter);
        var rspns = await _client.GetFromJsonAsync<ResponseModel<PaginationResponse<ProductModel>>>($"products?shoeStatus={shoeStatus}&keyword={keyword}&pageItem={tableState.PageItem}&pageIndex={tableState.PageIndex}");
        if (rspns.IsSuccess)
        {
            products = rspns.Result.Data;
            tableState.TotalRow = rspns.Result.TotalRow;
            totalShoe = rspns.Result.TotalRow - excludedProduct.Count;

            //Xóa nhưng products đã bị excluded
            products = products.Where(x => !excludedProduct.Select(a => a.ID).Contains(x.ID)).ToList();
        }
        else
        {
            await _dialog.ErrorAlert(rspns.Message);
        }
        loading = false;
    }
}
