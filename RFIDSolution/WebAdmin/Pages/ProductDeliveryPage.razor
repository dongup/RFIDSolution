<div class="card m-2 w-100">
    <div class="row">
        <div class="col-md-2">
            <div class="row h-100 align-items-center">
                <RFReaderConnect @ref="readerConnecter" AntennaId="AntenaId" Size="12" OnRead="OnTagRead"></RFReaderConnect>
            </div>
        </div>
        <div class="col-md-10 ">
            <div class="card">
                <div class="card-body">
                    <!--Delivery out-->
                    <Form OnValidSubmit="async () => { await transferOut(); }">
                        <div class="row">
                            <div class="col-md-6">
                                <h3 class="text-warning" style="font-weight: bold">DELIVERY OUT</h3>
                                <div class="row">
                                    <FormInputText Title="Transfer reason" @bind-Text="@transferOutModel.TRANSFER_REASON" Required="true" Size="12" InValidFeedBack="Please enter transfer reason"></FormInputText>
                                    <FormInputText Title="Transfer by" @bind-Text="@transferOutModel.TRANSFER_BY" Required="true" Size="3" InValidFeedBack="Please enter transfer user"></FormInputText>
                                    <FormInputText Title="Transfer to" @bind-Text="@transferOutModel.TRANSFER_TO" Required="true" Size="3" InValidFeedBack="Please enter transfer user"></FormInputText>

                                    <FormInputText Title="Document no" @bind-Text="@transferOutModel.REF_DOC_NO" Size="3" Disabled="true"></FormInputText>
                                    <FormInputText Title="Document date" @bind-Text="@transferOutModel.REF_DOC_DATE" Size="3" Disabled="true"></FormInputText>

                                    <div>
                                        <label>Note</label>
                                        <textarea value="@transferOutModel.TRANSFER_NOTE" @onchange="(e) => transferOutModel.TRANSFER_NOTE = e.Value.ToString()" rows="3" class="form-control"></textarea>
                                    </div>
                                    <div class="col-md-12 mt-2 d-flex">
                                        <button type="submit" class="btn btn-warning btn-lg"><span class="oi oi-arrow-circle-right me-1"></span> Delivery Out</button>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6 text-center">
                                <div style="overflow-y: auto;display: flex;flex-direction: column;align-items: center;background: #f4f5f8; max-height: 300px; max-width: 500px" class="py-4">
                                    <TransferSheet model="transferOutModel" products="validProducts" DivId="@divId"></TransferSheet>
                                </div>
                            </div>
                        </div>
                    </Form>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="m-2">
    <div class="row">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header d-flex align-items-center bg-gradient">
                    <h5 class="m-0 me-4 text-success" style="font-weight: bold">SEARCH</h5>
                    <div class="spacer"></div>
                    <div class="me-4" style="width: 500px">
                        <InputSearch TextChanged="async (value) => { textSearch = value; await searchProduct(); }" PlaceHolder="Search by SKU, model, category..."></InputSearch>
                    </div>

                    <button class="btn btn-secondary" @onclick="() => searchProducts.Clear()"><span class="oi oi-delete me-2"></span>CLEAR</button>
                </div>
                <table class="table table-bordered table-hover">
                    <thead>
                        <tr>
                            <th>Id</th>
                            <th>SKU</th>
                            <th>SHOE STATUS</th>
                            <th>MODEL</th>
                            <th>CATEGORY</th>
                            <th>SIZE</th>
                            <th>COLOR</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody style="max-height: 200px; overflow-y: auto">
                        @if (searchProducts.Count > 0)
                        {
                            int count = 1;
                            @foreach (var item in searchProducts)
                            {
                                <tr class="hand @(item.WarningClass) @(sledProduct.ID == item.ID? "bg-info" : "")" @onclick="() => showProductDetail(item)">
                                    <td>@item.ID</td>
                                    <td>@item.SKU</td>
                                    <td>
                                        <ProductStatusBadge ProductStatus="@item.ProductStatus"></ProductStatusBadge>
                                    </td>
                                    <td>@item.ModelName</td>
                                    <td>@item.Category</td>
                                    <td>@item.Size</td>
                                    <td>@item.ColorWay</td>
                                    <td><span class="oi oi-plus text-success" title="Add to selected shoes list" @onclick="() => addScanItem(item)"></span></td>
                                </tr>
                                count++;
                            }
                        }
                        else
                        {
                        }
                    </tbody>
                </table>
            </div>

            <div class="card mt-4">
                <div class="card-header d-flex align-items-center">
                    <h5 class="text-body m-0">SELECTED SHOES - Total: <span class="text-success">@products.Count</span></h5>
                    <div class="spacer"></div>
                    <button class="float-end btn btn-secondary" @onclick="() => { products.Clear(); validProducts.Clear(); }"><span class="oi oi-delete"></span> CLEAR RESULT</button>
                </div>
                <table class="table table-bordered table-hover">
                    <thead>
                        <tr>
                            <th>Id</th>
                            <th>EPC</th>
                            <th>SKU</th>
                            <th>SHOE STATUS</th>
                            <th>MODEL</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (products.Count > 0)
                        {
                            int count = 1;
                            @foreach (var item in products)
                            {
                                <tr class="hand @(item.WarningClass) @(sledProduct.ID == item.ID? "bg-info" : "")" @onclick="() => showProductDetail(item)">
                                    <td>@item.ID</td>
                                    <td>@item.EPC</td>
                                    <td>@item.SKU</td>
                                    <td>
                                        <ProductStatusBadge ProductStatus="@item.ProductStatus"></ProductStatusBadge>
                                    </td>
                                    <td>@item.ModelName</td>
                                    <td><span class="oi oi-delete text-danger" title="Remove item" @onclick="() => deleteScanItem(item)"></span></td>
                                </tr>
                                count++;
                            }
                        }
                        else
                        {
                            <NoData></NoData>
                        }
                    </tbody>
                    <tfoot></tfoot>
                </table>
            </div>
        </div>

        <div class="col-md-6 ps-0">
            <div class="card">
                <div class="card-header p-0">
                    <ul class="nav nav-tabs w-100">
                        <li class="nav-item p-0 hand" @onclick="() => shoeTabActive = 0">
                            <a class="nav-link text-primary @(shoeTabActive == 0? "active" : "")">SHOE INFO</a>
                        </li>
                        <li class="nav-item p-0 hand" @onclick="() => shoeTabActive = 1">
                            <a class="nav-link text-primary @(shoeTabActive == 1? "active" : "")">
                                TAG INFO
                            </a>
                        </li>
                        @if (sledProduct.ProductStatus == ProductStatus.Transfered)
                        {
                            <li class="nav-item p-0 hand" @onclick="() => shoeTabActive = 2">
                                <a class="nav-link text-primary @(shoeTabActive == 2? "active" : "")">
                                    TRANSFER OUT INFO
                                </a>
                            </li>
                        }
                    </ul>
                </div>
                <div class="card-body">

                    @if (sledProduct.ID == 0)
                    {
                        <p class="text-center p-4">Select a shoe to view detail information!</p>
                    }
                    else
                    {
                        //Thông tin giày
                        @if (shoeTabActive == 0)
                        {
                            <div class="row">
                                <!--Thông tin giầy-->
                                <div class="col-md-6">
                                    <ListItem Title="EPC" Bordered="false">@sledProduct.EPC</ListItem>
                                    <ListItem Title="SKU" Bordered="false">@sledProduct.SKU</ListItem>
                                    <ListItem Title="Model" Bordered="false">@sledProduct.ModelName</ListItem>
                                    <ListItem Title="Shoe status" Bordered="false">
                                        <ProductStatusBadge ProductStatus="@sledProduct.ProductStatus"></ProductStatusBadge>
                                    </ListItem>
                                    <ListItem Title="L/R" Bordered="false">
                                        @sledProduct.LR.GetDescription()
                                    </ListItem>
                                    <ListItem Title="Location" Bordered="false">@sledProduct.Location</ListItem>
                                    <ListItem Title="Season" Bordered="false">@sledProduct.Location</ListItem>
                                </div>
                                <div class="col-md-6">
                                    <ListItem Title="Stage" Bordered="false">@sledProduct.Season</ListItem>
                                    <ListItem Title="Dev style number" Bordered="false">@sledProduct.DevStyleName</ListItem>
                                    <ListItem Title="Color way" Bordered="false">@sledProduct.ColorWay</ListItem>
                                    <ListItem Title="Size" Bordered="false">@sledProduct.Size</ListItem>
                                    <ListItem Title="Category" Bordered="false">@sledProduct.Category</ListItem>
                                    <ListItem Title="POC" Bordered="false">@sledProduct.POC</ListItem>
                                    <ListItem Title="Remarks" Bordered="false">@sledProduct.Remarks</ListItem>
                                </div>
                                <!--Ghi chú-->
                                <div class="col-md-12">
                                    <div>
                                        <label>Note</label>
                                        <textarea value="@sledProduct.Note" @onchange="(e) => sledProduct.Note = e.Value.ToString()" rows="3" class="form-control"></textarea>
                                    </div>
                                </div>
                            </div>
                        }
                        //Thông tin tag
                        else if (shoeTabActive == 1)
                        {
                            <!--Thông tin tín hiệu tag-->
                            <div class="row">
                                <!--Thông tin tín hiệu tag-->
                                <div class="col-md-12">
                                    <div class="row">
                                        <ListItem Title="Tag status" Bordered="false">
                                            @if (sledProduct.TagResponse.Status == 1)
                                            {
                                                <span class="badge bg-success">Active</span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-danger">Away</span>
                                            }
                                        </ListItem>
                                        <ListItem Title="Last seen" Bordered="false">@sledProduct.TagResponse.LastSeen.ToTimeString()</ListItem>
                                        <ListItem Title="RSSI" Bordered="false">@sledProduct.TagResponse.RSSI</ListItem>
                                        <ListItem Title="Signal strenght" Bordered="false">
                                            <SignalStrenghtBar Strenght="sledProduct.TagResponse.SignalStrenght"></SignalStrenghtBar>
                                        </ListItem>
                                    </div>
                                </div>
                            </div>
                        }
                        //Thông tin transfer
                        else if (shoeTabActive == 2)
                        {
                            <div class="row">
                                <div class="col-md-6">
                                    <ListItem Title="Transfer reason" AlignItem="Alignment.Left" Bordered="false">@productTransferInfo.TRANSFER_REASON</ListItem>
                                    <ListItem Title="Transfer to" AlignItem="Alignment.Left" Bordered="false">@productTransferInfo.TRANSFER_TO</ListItem>
                                    <ListItem Title="Transfer by" AlignItem="Alignment.Left" Bordered="false">@productTransferInfo.TRANSFER_BY</ListItem>
                                    <ListItem Title="Transfer date" AlignItem="Alignment.Left" Bordered="false">@productTransferInfo.TIME_START.ToVNString()</ListItem>
                                    <ListItem Title="Time ago" AlignItem="Alignment.Left" Bordered="false">@productTransferInfo.TIME_START.TimeAgo()</ListItem>
                                </div>
                                <div class="col-md-6">
                                    <ListItem Title="Document no" Bordered="false">@productTransferInfo.REF_DOC_NO</ListItem>
                                    <ListItem Title="Document date" AlignItem="Alignment.Left" Bordered="false">@productTransferInfo.REF_DOC_DATE</ListItem>
                                    <ListItem Title="Note" AlignItem="Alignment.Left" Bordered="false">@productTransferInfo.TRANSFER_NOTE</ListItem>
                                </div>
                                <div class="col-md-12">
                                    <label>All shoe transfered</label>
                                    <table class="table table-bordered table-hover">
                                        <thead>
                                            <tr>
                                                <th>EPC</th>
                                                <th>SKU</th>
                                                <th>MODEL</th>
                                                <th>STATUS</th>
                                                <th>TRANSFER NOTE</th>
                                                <th></th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @if (productTransferInfo.Products.Count > 0)
                                            {
                                                int count = 1;
                                                @foreach (var item in productTransferInfo.Products)
                                                {
                                                    <tr class="hand">
                                                        <td>@item.EPC</td>
                                                        <td>@item.SKU</td>
                                                        <td>@item.ModelName</td>
                                                        <td>
                                                            <span class="@item.statusClass">
                                                                @item.STATUS.GetDescription()
                                                            </span>
                                                        </td>
                                                        <td>@item.TRANSFER_NOTE</td>
                                                    </tr>
                                                    count++;
                                                }
                                            }
                                            else
                                            {
                                                <NoData></NoData>
                                            }
                                        </tbody>
                                        <tfoot></tfoot>
                                    </table>
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@using Grpc.Core;
@using RFIDSolution.Shared.Models.ProductInout;
@attribute [Authorize]
@inject DialogService _dialog
@inject HttpClient _client
@inject DialogService _dialog
@inject JsService js
@inject DefineService defineService
@inject UserService userService

@page "/transferdelivery"
@code {
    [CascadingParameter] public IModalService Modal { get; set; }

    private RFReaderConnect readerConnecter = new RFReaderConnect();
    private bool reading = false;
    private string baseUrl = "ProductTransfers";
    private string divId = "divId";

    private List<DepartmentResponse> departments = new List<DepartmentResponse>();
    private List<RFTagResponse> Tags = new List<RFTagResponse>();
    private TransferInoutModel transferOutModel = new TransferInoutModel() { TRANSFER_TYPE = TransferType.Delivery };
    private TransferInoutModel productTransferInfo = new TransferInoutModel();

    private bool isTransferIn { get; set; } = false;
    private int shoeTabActive { get; set; } = 0;

    private int AntenaId = 1;
    private List<AntenaModel> antenas = new List<AntenaModel>();

    private bool loading = true;
    private bool addingItem = false;
    private string keyword = "";

    private string textSearch = "";
    private List<ProductModel> searchProducts = new List<ProductModel>();
    private ProductModel sledProduct = new ProductModel();
    private List<ProductModel> products = new List<ProductModel>();
    private List<ProductModel> validProducts = new List<ProductModel>();
    private List<string> reasonsList = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        MainLayout.Instance.PageTitle = "Delivery shoe";
        departments = await defineService.GetDepartmnets();
        await getReasonList();
        await loadAntenas();
        await refreshData();
    }

    private async Task searchProduct()
    {
        ProductModel product = new ProductModel();
        var rspns = await _client.GetFromJsonAsync<ResponseModel<List<ProductModel>>>("products/searchTransfer?keyword=" + textSearch);
        if (rspns.IsSuccess)
        {
            searchProducts = rspns.Result;
            StateHasChanged();
        }
        else
        {
            await _dialog.ErrorAlert(rspns.Message);
        }
    }

    private async Task showProductDetail(ProductModel product)
    {
        if (product.ID == 0) return;

        if (sledProduct.ID == product.ID)
        {
            sledProduct = new ProductModel();
        }
        else
        {
            sledProduct = product;
        }

        //Nếu giày đang được mượn thì show thêm thông tin transfer out
        if (sledProduct.ProductStatus == ProductStatus.Transfered)
        {
            var findResult = await findTransferInformation(product.ID);
            if (findResult != null)
            {
                productTransferInfo = findResult;
            }
        }
    }

    private async Task addScanItem(ProductModel sltItem)
    {
        if(sltItem.ProductStatus != ProductStatus.Available)
        {
            await _dialog.ErrorAlert($"{sltItem.ProductStatusStr} shoe is not for delivery!");
            return;
        }

        if(validProducts.Any(x => x.ID == sltItem.ID))
        {
            await _dialog.ErrorAlert($"Shoe {sltItem.SKU} is not already selected!");
            return;
        }

        products.Add(sltItem);
        validProducts.Add(sltItem);

        searchProducts.Remove(sltItem);
    }

    private void deleteScanItem(ProductModel item)
    {
        products.Remove(item);
        if (item.ID == sledProduct.ID) sledProduct = new ProductModel();

        var validItem = validProducts.FirstOrDefault(x => x.ID == item.ID);
        if(validItem != null)
        {
            validProducts.Remove(validItem);
        }
    }

    private async Task transferOut()
    {
        //Kiểm tra số lượng giày đã scan
        if (products.Count <= 0)
        {
            await _dialog.ErrorAlert("Please scan at least one shoe!");
            return;
        }

        if (products.Any(x => x.ProductStatus == ProductStatus.Unknown))
        {
            await _dialog.ErrorAlert("Please remove all Unknown tag first!");
            return;
        }

        //Kiểm tra trạng thái của những giày đã scan, nếu có giày đang được mượn thì không cho transfer
        var notAvaiableShoes = products.Where(x => x.ProductStatus == ProductStatus.Transfered || x.ProductStatus == ProductStatus.Unavailable || x.ProductStatus == ProductStatus.DeliveryOut);
        foreach (var item in notAvaiableShoes)
        {
            item.IsWarning = true;
        }
        if (notAvaiableShoes.Count() > 0)
        {
            await _dialog.ErrorAlert("One or more shoe is already transfered/delivery out, please remove them and try again!");
            return;
        }

        //Xác nhận xuất
        if (!await _dialog.Confirm($"Are you sure want to delivery {products.Count} shoe(s) out?")) return;

        //Yêu cầu mật khẩu xác nhận
        if (!await _dialog.ConfirmPassword()) return;

        //Request server
        var requestModel = new TransferOutRequest(transferOutModel);
        requestModel.Products = products.Select(x => new ProductTransferRequest(x)).ToList();
        var req = await _client.PostAsJsonAsync<TransferOutRequest>($"{baseUrl}/deliveryOut", requestModel);
        var rspns = await req.Content.ReadFromJsonAsync<ResponseModel<object>>();
        if (rspns.IsSuccess)
        {
            await js.PrintDiv(divId);
            await _dialog.SuccessAlert("Delivery out succeed!");
            products = new List<ProductModel>();
            await refreshData();
        }
        else
        {
            await _dialog.ErrorAlert(rspns.Message);
        }
        await Task.Delay(1000);
        transferOutModel = new TransferInoutModel()
        {
            TRANSFER_TYPE = TransferType.Delivery
        };
        validProducts.Clear();
    }

    private async Task OnTagRead(RFTagResponse tag)
    {
        Console.WriteLine("Tag read");
        tag.Status = 1;
        var product = products.FirstOrDefault(x => x.EPC == tag.EPCID);

        if (product == null)
        {
            var searchProduct = await findProductByEPC(tag.EPCID.Trim());
            if (searchProduct != null)
            {
                product = searchProduct;

                tag.FirstSeen = DateTime.Now.Ticks;
                product.TagResponse = tag;
                products.Add(product);

                //Nếu chưa chọn product nào thì tự động chọn product đầu tiên scan được
                if (sledProduct.ID == 0)
                {
                    await showProductDetail(product);
                }
            }
            //Nếu không tìm thấy giày thì show dòng tag bị lỗi
            else
            {
                product = new ProductModel();
                product.EPC = tag.EPCID;
                product.TagResponse = tag;
                product.SKU = "";
                product.ProductStatus = ProductStatus.Unknown;
                product.ModelName = "";
                products.Add(product);
            }
        }
        else
        {
            product.TagResponse = tag;
        }
        StateHasChanged();
    }

    private async Task getReasonList()
    {
        var rspns = await _client.GetFromJsonAsync<ResponseModel<List<string>>>($"{baseUrl}/reasons");
        if (rspns.IsSuccess)
        {
            reasonsList = rspns.Result;
            StateHasChanged();
        }
        else
        {
            await _dialog.ErrorAlert(rspns.Message);
        }
    }

    private async Task refreshData()
    {
        UserModel currentUser = await UserService.getCurrentUser();

        transferOutModel.REF_DOC_NO = await defineService.GetNewTransferDocumentCode();
        transferOutModel.TRANSFER_BY = currentUser.FullName;
        transferOutModel.CREATED_USER = currentUser.FullName;
        transferOutModel.CREATED_USER_DEPT = currentUser.DepartmentName;
        StateHasChanged();
    }

    private async Task<ProductModel> findProductByEPC(string EPC)
    {
        ProductModel product = new ProductModel();
        var rspns = await _client.GetFromJsonAsync<ResponseModel<ProductModel>>("products/byepc?epc=" + EPC);
        if (rspns.IsSuccess)
        {
            product = rspns.Result;
            if (product.ProductStatus == ProductStatus.Available)
            {
                if (!validProducts.Any(x => x.ID == product.ID))
                {
                    validProducts.Add(product);
                }
            }
        }
        else
        {
            await _dialog.ErrorAlert(rspns.Message);
        }
        return product;
    }

    private async Task<TransferInoutModel> findTransferInformation(int productId)
    {
        var rspns = await _client.GetFromJsonAsync<ResponseModel<TransferInoutModel>>($"{baseUrl}/byProductId/{productId}");
        if (rspns.IsSuccess)
        {
            return rspns.Result;
        }
        else
        {
            await _dialog.ErrorAlert(rspns.Message);
            return new TransferInoutModel();
        }
    }

    public async Task loadAntenas()
    {
        var rspns = await _client.GetFromJsonAsync<ResponseModel<List<AntenaModel>>>($"Antennas");
        if (rspns.IsSuccess)
        {
            antenas = rspns.Result;
            AntenaId = antenas.FirstOrDefault(x => x.LOCATION == AntennaLocation.Table)?.ANTENNA_ID ?? 0;
            //Console.WriteLine(AntenaId);
        }
        else
        {
            await _dialog.SuccessAlert(rspns.Message);
        }
    }

}
