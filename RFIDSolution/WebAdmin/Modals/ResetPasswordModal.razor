<div class="row" style="width: 500px">
    <div class="col-md-12 d-flex flex-column">
        <label>New password <Required></Required></label>
        <input type="password" @bind-value="@Password" placeholder="Enter new password..." class="form-control form-control-sm" required>

        <label>Confirm new password <Required></Required></label>
        <input type="password" @bind-value="@PasswordConfirm" placeholder="Confirm new password..." class="form-control form-control-sm mt-2" required>
        @if (!valid)
        {
            <p class="text-danger">@validMessage</p>
        }
    </div>

    <div class="col-md-12 mt-2 d-flex">
        <div class="spacer"></div>
        <button @onclick="() => ModalInstance.CancelAsync()" class="btn btn-light me-2">Cancel</button>
        <button @onclick="OK" class="btn btn-primary">Confirm</button>
    </div>
</div>

@inject DialogService _dialog
@inject UserService _userService
@code {
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }

    [Parameter]
    public int UserId { get; set; }

    public string Password { get; set; }
    public string PasswordConfirm { get; set; }

    public string validMessage = "";
    public bool valid = true;

    protected override void OnInitialized()
    {
    }

    public async void OK()
    {
        valid = true;
        if (string.IsNullOrEmpty(Password) || string.IsNullOrEmpty(PasswordConfirm))
        {
            validMessage = "Please enter your password!";
            valid = false;
            StateHasChanged();
            return;
        }

        if (!Password.Equals(PasswordConfirm))
        {
            validMessage = "Password confirm incorrect!";
            valid = false;
            StateHasChanged();
            return;
        }

        if (!await _dialog.Confirm("Are you sure want to reset password?")) return;

        bool confirmed = await _userService.ResetPassword(UserId, Password);

        if (confirmed)
        {
            _dialog.SuccessAlert("Reset password succeed!");
            await ModalInstance.CloseAsync(ModalResult.Ok<bool>(true));
        }
    }

}