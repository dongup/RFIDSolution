<div class="@(SizeClass) d-flex align-items-center flex-column text-center">
    <button class="btn text-center w-100" @onclick="toggleReader">
        @if (reading)
        {
            <span class="oi oi-media-pause text-primary w-100" style="font-size: 120px"></span>
        }
        else
        {
            <span class="oi oi-play-circle text-primary w-100" style="font-size: 120px"></span>
        }
    </button>
    <label class="text-center" style="font-size: 32px">@(reading? "STOP SCAN" : "START SCAN")</label>

    @if (HubStatus)
    {
        <p>Reader service status:  <span class="text-success">Connected</span></p>
    }
    else
    {
        <p>Reader service status: <span class="text-danger">Disconnected <span class="oi oi-reload" @onclick="async () => await reConnecthub()"></span></span></p>
    }

    <p>Antenna port: @AntennaId</p>
</div>

@implements IDisposable 
@using Microsoft.AspNetCore.SignalR.Client
@inject DialogService _dialog
@code {
    [Parameter]
    public int Size { get; set; }

    [Parameter]
    public EventCallback<RFTagResponse> OnRead { get; set; }

    [Parameter]
    public int AntennaId { get; set; } = 1;

    public string SizeClass => $"col-md-{Size}";

    public bool reading = false;
    public bool connected = false;
    private HubConnection hubConnection;
    private bool HubStatus => hubConnection?.State == HubConnectionState.Connected;

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        hubConnection = new HubConnectionBuilder()
                .WithUrl($"{Program.RootApiUrl}readerhub")
                .Build();
        hubConnection.On<RFTagResponse>("ReceiveTag", ReceiveTag);
        hubConnection.On<string>("OnError", onError);

        await hubConnection.StartAsync();
    }

    private async Task reConnecthub()
    {
        if (hubConnection.State != HubConnectionState.Connected)
        {
            await hubConnection.StartAsync();
        }
    }

    private async Task ReceiveTag(RFTagResponse tag)
    {
        Console.WriteLine("Tag received: " + tag.EPCID);
        await OnRead.InvokeAsync(tag);
    }

    private async Task toggleReader()
    {
        reading = !reading;
        if (reading)
        {
            await startReader();
            //await _dialog.SuccessAlert("Reader started!");
        }
        else
        {
            await stopReader();
            //await _dialog.ErrorAlert("Reader stoped!");
        }
    }

    private async Task onError(string message) {
        await _dialog.ErrorAlert(message);
        reading = false;
        connected = false;
        StateHasChanged();
    }

    public async Task startReader()
    {
        await reConnecthub();
        await hubConnection.InvokeAsync("StartInventory", new RFTagRequest() { AntenIds = new List<int>() { AntennaId } });
    }

    public async Task stopReader()
    {
        await reConnecthub();
        await hubConnection.InvokeAsync("StopInventory");
    }

    async void IDisposable.Dispose()
    {
        await stopReader();
        await hubConnection.DisposeAsync();
    }
}
