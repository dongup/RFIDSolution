@if (IsShow) 
{ 
    <div class="@AlertClass" role="alert">
        <span class="@IconClass"></span>
        <span class="ms-1 me-3">@Message</span>
        <div class="spacer"></div>
        <span class="oi oi-x ms-2 me-0 mb-1 hand" @onclick="() => IsShow = false"></span>
    </div>
}

@code {
    [Parameter]
    public string Message { get; set; }

    public bool IsShow { get; set; }

    public string IconClass { get; set; } = "oi oi-circle-check";

    public string AlertClass { get; set; } = "alert alert-primary d-flex align-items-center";

    public List<Task> tasks = new List<Task>();

    private int Delay = 5000;

    public async Task Show()
    {
        IsShow = true;
        StateHasChanged();
        var task = Task.Delay(Delay);
        tasks.Add(task);

        await Task.Run(async () =>
        {
            int count = 0;
            while(tasks.Count > 0)
            {
                var t = tasks.FirstOrDefault();
                await t;
                tasks.Remove(t);
            }
            IsShow = false;
            StateHasChanged();
        });
    }

    public async Task Success(string message)
    {
        IconClass = "oi oi-circle-check";
        AlertClass = "alert alert-success d-flex align-items-center";
        Message = message;
        await Show();
    }

    public async Task Error(string message)
    {
        IconClass = "oi oi-warning";
        AlertClass = "alert alert-danger d-flex align-items-center";
        Message = message;
        await Show();
    }

    public async Task Info(string message)
    {
        IconClass = "oi oi-circle-info";
        AlertClass = "alert alert-info d-flex align-items-center";
        Message = message;
        await Show();
    }

}
